//생성자, abstract 추상클래스, 추상메소드 사용

class Exam2 {
	public static void main(String[] args) {
		사람 a김철수 = new 김철수(); // 김철수 객체를 만들자마자 김철수의 생성자가 실행됨
		사람 a김영희 = new 김영희(); // "

		a김철수.배달_음식_주문하다();
		// 영화반점에서 김철수(010-1234-1234)에게 매운 짬뽕(을)를 배달합니다.

		a김영희.배달_음식_주문하다();
		// 북경반점에서 김영희(010-4321-4321)에게 안매운 짬뽕(을)를 배달합니다.

		a김영희.a좋아하는_음식점 = a김철수.a좋아하는_음식점;
		a김영희.선호하는_음식의_매운정도 = "아주 매운";
		a김영희.선호하는_음식 = "짜장";

		a김영희.배달_음식_주문하다();
		// 영화반점에서 김영희(010-4321-4321)에게 아주 매운 짜장(을)를 배달합니다.
	}
}

abstract class 사람 {	//추상클래스
	String 이름;
	String 전화번호;
	String a좋아하는_음식점;
	String 선호하는_음식의_매운정도;
	String 선호하는_음식;

	// 추상메소드를 사용함으로써 구상메소드(오버라이드)는 필수가됨
	abstract void 배달_음식_주문하다();
}

class 김철수 extends 사람 {
	// 생성자, 새로운 객체가 만들어지는 순간 실행되는 생성자 메소드
	김철수() {
		this.이름 = "김철수";
		this.전화번호 = "010-1234-1234";
		this.a좋아하는_음식점 = "영화반점";
		this.선호하는_음식의_매운정도 = "매운";
		this.선호하는_음식 = "짬뽕";
	}

	void 배달_음식_주문하다() {
		System.out.printf("%s에서 %s(%s)에게 %s %s(을)를 배달합니다.\n", 
				this.a좋아하는_음식점, this.이름, this.전화번호, this.선호하는_음식의_매운정도, this.선호하는_음식);
	}
}

class 김영희 extends 사람 {
	// 생성자, 새로운 객체가 만들어지는 순간 실행되는 생성자 메소드
	김영희() {
		this.이름 = "김영희";
		this.전화번호 = "010-4321-4321";
		this.a좋아하는_음식점 = "북경반점";
		this.선호하는_음식의_매운정도 = "안매운";
		this.선호하는_음식 = "짬뽕";
	}

	void 배달_음식_주문하다() {
		System.out.printf("%s에서 %s(%s)에게 %s %s(을)를 배달합니다.\n", 
				this.a좋아하는_음식점, this.이름, this.전화번호,	this.선호하는_음식의_매운정도, this.선호하는_음식);
	}
}